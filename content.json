[{"title":"SVN服务搭建","date":"2017-03-15T11:21:01.000Z","path":"SVN-Use/","text":"协同处理一些项目时，需要一个项目管理工具，来随时查看多人修改的文档，图片等，对于程序开发，一个好的项目管理工具可以大大提升工作效率。目前用的比较多的应该算是SVN和Git了。SVN（百度百科词条）是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。 服务端在CentOS上安装SVN服务端。 安装root用户执行命令时不用加sudo。1$ sudo yum install subversion -y # 安装SVN服务 查看是否安装完成，执行123456789101112131415$ svnserve --versionsvnserve, version 1.7.14 (r1542130) compiled Nov 20 2015, 19:25:09Copyright (C) 2013 The Apache Software Foundation.This software consists of contributions made by many people; see the NOTICEfile for more information.Subversion is open source software, see http://subversion.apache.org/The following repository back-end (FS) modules are available:* fs_base : Module for working with a Berkeley DB repository.* fs_fs : Module for working with a plain file (FSFS) repository.Cyrus SASL authentication is available. 创建版本库存放目录1$ mkdir /home/vagrant/svn 创建版本库12$ svnadmin create /home/vagrant/svn/FirstRepo # 创建第一个项目$ svnadmin create /home/vagrant/svn/SecoRepo # 创建第二个项目 配置文件修改多个版本库我们需要使用同一套验证来管理，以便于后期维护，首先先查看项目目录1234$ ls /home/vagrant/svn/FirstRepo/conf # 查看下目录文件，有三个文件authz passwd svnserve.conf$ ls /home/vagrant/svn/SecoRepo/confauthz passwd svnserve.conf authz文件存放着用户和用户组对不同目录的读写权限，passwd存放着用户名和密码，svnserve.conf则是对svnserve进程进行控制管理，权限校验方式等配置的服务文件。我们把FirstRepo下的authz和passwd文件移动到/home/vagrant/svn目录，再修改对应版本库下的svnserve.conf文件即可实现对多个版本库的访问配置。现在逐一修改这些配置文件，来完成服务端的配置。12$ mv /home/vagrant/svn/FirstRepo/conf/passwd /home/vagrant/svn/$ mv /home/vagrant/svn/FirstRepo/conf/authz /home/vagrant/svn/ 修改各版本目录下的svnserve.conf，分别找到1234# anon access = read# authz access = write# password-db = passwd# authz-db = authz 修改为1234anon access = none # 匿名用户无访问权限authz access = write # 通过authz验证的用户具备可读写的权限password-db = /home/vagrant/svn/passwd # 用户密码库authz-db = /home/vagrant/svn/authz # 权限验证库 接下来，根据用户的权限来建立用户及用户组和对应目录的权限分配。123456789$ sudo vi passwd # 建立用户名和对应密码，显示如下### This file is an example password file for svnserve.### Its format is similar to that of svnserve.conf. As shown in the### example below it contains one section labelled [users].### The name and password for each user follow, one account per line.[users]# harry = harryssecret# sally = sallyssecret 在users这个节点下，按照注释的格式，加入几个用户。123456789101112131415161718192021### This file is an example password file for svnserve.### Its format is similar to that of svnserve.conf. As shown in the### example below it contains one section labelled [users].### The name and password for each user follow, one account per line.[users]# harry = harryssecret# sally = sallyssecretadmin = admin # 管理员manager = manager # 项目经理# 苦逼的码农programer1 = programer1programer2 = programer2programer3 = programer3programer4 = programer4programer5 = programer5programer6 = programer6programer7 = programer7# 测试人员test123 = 123test256 = 256 保存退出。再修改对应用户的读写权限123456789101112131415161718192021222324252627282930313233$ sudo vi authz # 显示如下### This file is an example authorization file for svnserve.### Its format is identical to that of mod_authz_svn authorization### files.### As shown below each section defines authorizations for the path and### (optional) repository specified by the section name.### The authorizations follow. An authorization line can refer to:### - a single user,### - a group of users defined in a special [groups] section,### - an alias defined in a special [aliases] section,### - all authenticated users, using the '$authenticated' token,### - only anonymous users, using the '$anonymous' token,### - anyone, using the '*' wildcard.###### A match can be inverted by prefixing the rule with '/home/vagrant'. Rules can### grant read ('r') access, read-write ('rw') access, or no access### ('').[aliases]# joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average[groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&amp;joe# [/foo/bar]# harry = rw# &amp;joe = r# * =# [repository:/baz/fuz]# @harry_and_sally = rw# * = r aliases给用户建立别名，groups给用户分组，另外两个节点则是对SVN版本及相关目录的用户权限控制，修改如下1234567891011121314151617181920212223[aliases]t1 = test123t2 = test256[groups]proj1 = programer1,programer2,programer3,&amp;t1 # 使用&amp;引用别名proj2 = programer4,programer5[/] # SVN根目录权限配置admin = rw # 给admin用户分配可读可写权限manager = rw [FirstRepo:/] # FirstRepo项目根目录权限配置@proj1 = rw # 使用@引用用户组，给FirstRepo用户组分配可读可写权限programer6 = r # 给programer6分配只读权限[SecoRepo:/]@proj2 = rw &amp;t1 = r[SecoRepo:/trunk]programer7 = r # 给programer7分配SecoRepo项目下trunk目录的可读权限&amp;t2 = rw 保存退出。启动服务1$ svnserve -d -r /home/vagrant/svn # -d表示服务在后台执行，-r设置svn根目录 客户端 CentOS 安装 1$ sudo yum install subversion -y 检出 实际我们在客户端使用时，只需使用一个用户认证即可，检出时不需要加上‘–username’参数，这里是为了进行测试，依次使用authz中配置的用户来测试，将以下命令的ip地址替换为你搭建svnserve服务所在的ip地址 12345678$ svn co svn://10.2.100.185/FirstRepo --username 'admin' # 依次替换admin为programer1,programer6,test123，都可以检出成功Authentication realm: &lt;svn://10.2.100.185:3690&gt; 978bcb94-bb76-4a3e-9698-b348e7e1504cPassword for 'admin': *****Checked out revision 0.$ svn co svn://10.2.100.185/FirstRepo --username 'programer4' # 使用programer4，即使输入了正确的密码也会提示认证失败Authentication realm: &lt;svn://10.2.100.185:3690&gt; 5fabb029-bd82-461c-853f-ecd633dda130Password for 'programer4': **********svn: E170001: Authorization failed 提交 12345678910111213$ cd FirstRepo # 进入检出的仓库$ touch index.txt # 创建一个测试文本$ svn add index.txt # 将index.text加入版本控制中A index.txt$ svn status # 查看当前版本库状态，后面可以加上具体的路径地址A index.txt$ svn ci index.txt -m '第一次提交' --username 'admin' # 可以依次测试用户是否有写权限。提交时必须要用‘-m’参数，添加提交说明Authentication realm: &lt;svn://10.2.100.185:3690&gt; b23e296a-0c64-4b8a-b4ea-a917058ec936Password for 'admin': *****Adding index.txtTransmitting file data .doneCommitting transaction...Committed revision 1. 更新 别人提交后，你需要更新过来查看，再进行修改 1$ svn up # 进入到版本目录后，执行，其后可以指定更新的目录或文件 其他常见命令可以使用‘svn help’来查看。 Windows检出Windows下有图形界面的SVN管理工具TortoiseSvn，安装下载后命令直接集成在鼠标右键。在你想检出版本库的目录下，点击右键，找到‘svn checkout’或者‘svn 检出’，输入svn地址和检出到本地目录的地址，点击确定，再弹出的输入框输入用户名和密码即可。更新在你想更新的文件和目录上，点击右键，再点击‘SVN Update’或‘SVN 更新’，即可。提交在你想更新的文件和目录上，点击右键，再点击‘SVN Commit’或‘SVN 提交’，在弹出的弹窗中输入提交消息，如果是提交的文件夹，可以选择提交文件夹下的文件。提交指定文件：提交指定文件夹：其他命令及设置，右键选择TortoiseSvn查看。其他可以参见SVN官网http://subversion.apache.org/","tags":[{"name":"Linux","slug":"Linux","permalink":"https://jontylee.github.io/tags/Linux/"},{"name":"SVN","slug":"SVN","permalink":"https://jontylee.github.io/tags/SVN/"}]},{"title":"VirtulaBox + Vagrant——Linux虚拟环境好伴侣","date":"2017-03-13T16:09:53.000Z","path":"virtual-linux/","text":"作为一个苦逼的程序猿，避免不了要接触Linux系统，但对于从小被Windows系统教育起来的人来说，一时之间难以接受Linux的操作管理方式，再加上部分常用软件没有Linux版本，所以要完全将系统切换到Linux上就着实有点困难了。简单粗暴的解决方式就是拜苹果教，既可以体验炫酷的UI，也可以逐步了解到命令行的魅力。除此之外，就需要在本地Windows系统搭建一个Linux虚拟机，来模拟代码在线上生产环境的运行状态。可用的虚拟软件也有挺多，为什么选择VirtualBox和Vagrant呢？两个软件都是开源免费，跨平台的，而且使用她们可以简单快速的搭建虚拟环境，同时对虚拟环境的管理也十分方便，而且网上还有根据不同开发环境制作的box虚拟镜像可供选择，比去下原始的系统镜像文件要方便。 安装首先去VirtualBox和Vagrant官网下载最新版本的软件。 VirtualBox：https://www.virtualbox.org Vagrant：https://www.vagrantup.com 点击下载按钮，根据当前系统平台选择软件版本，进行下载。这里我们都选windows就行，然后就静静地等他下载完成，双击打开，开始安装，一路next，选择下安装目录，等待安装完成。完成后，打开cmd或者PowerShell，执行以下命令：1vagrant -v 会输出vagrant的版本号，这里我安装的版本为1.9.1：1Vagrant 1.9.1 证明Vagrant已安装完成，并且Vagrant命令已添加到环境变量path中。如果提示“’vagrant’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”，则表明vagrant命令没有添加到path中，需要手动添加。右键桌面我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量中找到path，选中，点击编辑，将Vagrant安装目录的bin路径添加到path中，我的Vagrant安装在E:\\vagrant中，添加后如下：然后点击确定，重启下电脑，再重新执行以上命令，查看是否正常显示。 初始化接下来需要下载Vagrant Box虚拟镜像，首先到Vagrant Box网站 https://atlas.hashicorp.com/boxes/search 搜索需要的box。这里以搜索centos，按下载量排序为例：可以选择自己需要的点击进去，查看该box的具体使用和各版本发行介绍。我们以bento/centos-7.2来初始化我们的虚拟环境。先新建一个文件夹来存放虚拟文件1mkdir CentOS7.2 然后进入该文件夹，初始化配置文件12cd CentOS7.2vagrant init bento/centos-7.2 会有以下输出1A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant. 这时CentOS7.2下会生成一个文件Vagrantfile，这样就初始化完成了。 配置用记事本或其他编辑器打开Vagrantfile，修改配置。首先配置一下共享目录，这样我们就可以用主机来修改文件，编写代码，虚拟机就可以共享这些文件及修改了。找到1# config.vm.synced_folder \"../data\", \"/vagrant_data\" 去掉注释，将”../data”，修改为你主机想共享的目录，将”/vagrant_data”修改为虚拟机想挂载的目录即可，如：1config.vm.synced_folder \"d:/vagrant\", \"/vagrant\" 如果是做web开发，还需要配置一下如何用浏览器访问虚拟机，有三种方法，如果想给Vagrant Box分配一个只能主机访问的ip，找到1# config.vm.network \"private_network\", ip: \"192.168.33.10\" 去掉前面的#号，自定义一下ip地址即可。如果想让局域网内的电脑都可以访问，那么找到1# config.vm.network \"public_network\" 去掉注释，Vagrant Box会获得一个和主机同处一个网段的ip地址。不想分配ip，也可以，找到1# config.vm.network \"forwarded_port\", guest: 80, host: 8080 给Vagrant Box开放一个主机端口host，再配置一下虚拟机端口guset。我使用的是第一种方法：1config.vm.network \"private_network\", ip: \"192.168.33.10\" 至此，我们的配置修改就已完成，记得保存文件！其他的配置可以参考Vagrantfile上的说明或者去官网了解。 启动打开cmd或者PowerShell，进入centos7.2文件夹，启动Vagrant Box12cd e:/CentOS7.2vagrant up --provider virtualbox 等待box下载，启动完成即可。可以趁着这段时间，再去下个Putty或者XShell免费版，用于连接虚拟机。当命令执行完成后，虚拟机就已经启动完成。注意以下输出信息12default: SSH address: 127.0.0.1:2200default: SSH username: vagrant 这是使用Putty或者XShell通过ssh连接虚拟机的ip及端口号，你的可能是127.0.0.1:2222。ssh默认的用户名和密码都是vagrant。 连接 Putty双击打开Putty，配置好ssh连接的ip和端口，点击open，弹出的对话框选择“是”，然后输入用户名和密码，即可成功登陆。 XShell点击菜单栏的文件，点击新建，弹出新建对话弹窗，名称随便写一个就好，主机和端口号根据vagrant up的输出信息填写，点击确定，完成配置。再点击文件，打开，选中刚才配置的ssh，点击连接，在弹出的弹窗中输入用户名，密码。登陆成功，查看下系统版本 连接成功后，就可以做一下web服务的配置了，详细参考PHP虚拟机开发环境搭建。 常用Vagrant命令 帮助 1vagrant help 关闭 1vagrant halt 重启 1vagrant reload 暂停 1vagrant suspend 查看本地已安装的box 1vagrant box list 还有一些其他命令可以使用Vagrant的帮助命令来查看如何使用，或者去官网了解。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://jontylee.github.io/tags/Linux/"}]}]
